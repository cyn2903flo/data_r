#geom_smooth(method =  "lm", se = FALSE) +
ggtitle("Relaciónn radius_mean y concave_points_mean") +
theme_minimal()
lsr_cancer<- lm(concave_points_mean ~ radius_mean, breast.cancer)
print(lsr_cancer)
breast.cancer.num %>%
ggplot(aes(x=radius_mean,
y=concave_points_mean)) +
geom_point() +
geom_abline(intercept = b0, slope = b1) +
#geom_smooth(method =  "lm", se = FALSE) +
ggtitle("Relaciónn radius_mean y concave_points_mean") +
theme_minimal()
library(dplyr)
library(ggplot2)
breast.cancer <- read.csv('https://raw.githubusercontent.com/analuisaortega/BEDU-R-2020/master/Data/breast_cancer.csv
')
str(breast.cancer)
breast.cancer$diagnosis <- as.factor(breast.cancer$diagnosis)
breast.cancer.num <- breast.cancer %>% select(-c(1,2,3))
cor(breast.cancer.num)
breast.cancer.num %>%
ggplot(aes(x=radius_mean,
y=concave_points_mean)) +
geom_point() +
geom_abline(intercept = b0, slope = b1) +
#geom_smooth(method =  "lm", se = FALSE) +
ggtitle("Relaciónn radius_mean y concave_points_mean") +
theme_minimal()
lsr_cancer<- lm(concave_points_mean ~ radius_mean, breast.cancer)
print(lsr_cancer)
print(lsr_cancer)
summary(lsr_cancer)
lsr_cancer$coefficients
b_0 <- lsr_cancer$coefficients[1]
b_1 <- lsr_cancer$coefficients[2]
x_new <- 26
y_new <- b_0 + b_1*x_new
print(y_new)
predict(lsr_cancer, data.frame(radius_mean = c(20,24,1)))
breast.cancer.num %>%
ggplot(aes(x=radius_mean,
y=concave_points_mean)) +
geom_point() +
geom_abline(intercept = b0, slope = b1) +
#geom_smooth(method =  "lm", se = FALSE) +
ggtitle("Relaciónn radius_mean y concave_points_mean") +
theme_minimal()
lsr_cancer<- lm(concave_points_mean ~ radius_mean, breast.cancer)
print(lsr_cancer)
summary(lsr_cancer)
library(dplyr)
library(ggplot2)
breast.cancer <- read.csv('https://raw.githubusercontent.com/analuisaortega/BEDU-R-2020/master/Data/breast_cancer.csv
')
str(breast.cancer)
breast.cancer$diagnosis <- as.factor(breast.cancer$diagnosis)
breast.cancer.num <- breast.cancer %>% select(-c(1,2,3))
cor(breast.cancer.num)
breast.cancer.num %>%
ggplot(aes(x=radius_mean,
y=concave_points_mean)) +
geom_point() +
geom_abline(intercept = b0, slope = b1) +
#geom_smooth(method =  "lm", se = FALSE) +
ggtitle("Relaciónn radius_mean y concave_points_mean") +
theme_minimal()
lsr_cancer<- lm(concave_points_mean ~ radius_mean, breast.cancer)
print(lsr_cancer)
summary(lsr_cancer)
lsr_cancer$coefficients
b_0 <- lsr_cancer$coefficients[1]
b_1 <- lsr_cancer$coefficients[2]
x_new <- 26
y_new <- b_0 + b_1*x_new
print(y_new)
predict(lsr_cancer, data.frame(radius_mean = c(20,24,1)))
breast.cancer.num %>%
ggplot(aes(x=radius_mean,
y=concave_points_mean,
z=concavity_se)) +
geom_point() +
ggtitle("Relaciónn radius_mean y concave_points_mean")
theme_minimal()
lsr_cancer<- lm(concave_points_mean ~ radius_mean + concavity_se, breast.cancer.num)
print(lsr_cancer)
summary(lsr_cancer)
lsr_cancer$coefficients
b_0 <- lsr_cancer$coefficients[1]
b_1 <- lsr_cancer$coefficients[2]
b_2 <- lsr_cancer$coefficients[3]
x_new <- 26
y_new <- b_0 + b_2+ b_1*x_new
print(y_new)
breast.cancer.num %>%
ggplot(aes(x=radius_mean,
y=concave_points_mean)) +
geom_point() +
geom_abline(intercept = b_0, slope = b_1) +
#geom_smooth(method =  "lm", se = FALSE) +
ggtitle("Relaciónn radius_mean y concave_points_mean") +
theme_minimal()
install.packages('class')
random <- sample(x)1:nrow(iris),
size = 0.8*nrow(iris))
random <- sample(x = 1:nrow(iris),
size = 0.8*nrow(iris))
iris_train <- iris[random, -5]
iris_test <- iris[-random, -5]
iris_categoria_tran <- iris[random, 'Species']
iris_categoria_test <- iris[random, 'Species']
random <- sample(x = 1:nrow(iris), size = 0.8*nrow(iris))
#install.packages('class')
library(class)
random <- sample(x = 1:nrow(iris), size = 0.8*nrow(iris))
iris_train <- iris[random, -5]
iris_test <- iris[-random, -5]
iris_categoria_tran <- iris[random, 'Species']
iris_categoria_test <- iris[random, 'Species']
predict <- knn(train = iris_train,)
src(iris)
iris
random <- sample(x = 1:nrow(iris), size = 0.8*nrow(iris))
iris_train <- iris[random, -5]
iris_test <- iris[-random, -5]
iris_categoria_tran <- iris[random, 'Species']
iris_categoria_test <- iris[random, 'Species']
predict <- knn(train = iris_train,)
nrow(iris)
0.8*nrow(iris)
random <- sample(x = 1:nrow(iris), size = 0.8*nrow(iris))
random
iris_train <- iris[random, -5]
iris_test <- iris[-random, -5]
iris_categoria_tran <- iris[random, 'Species']
iris_categoria_test <- iris[random, 'Species']
predict <- knn(train = iris_train,
test = iris_test)
predict <- knn(train = iris_train,
test = iris_test,
cl = iris_categoria_tran,
k=7)
iris_categoria_test
con_mat <- table(predict, iris_categoria_test)
con_mat
library(dplyr)
library(ggplot2)
install.packages('class')
libray(class)
#install.packages('class')
library(class)
iris
nrow(iris)
0.8*nrwo(iris)
0.8*nrow(iris)
nrow(iris)
data(iris)
random <- sample(x=1:nrow(iris), size = 0.8*nrwo(iris))
random <- sample(x=1:nrow(iris), size = 0.8*nrow(iris))
iris
random
dataset<-iris
nrow(iris)
0.8*nrow(iris)
nrow(iris)
random <- sample(x=1:nrow(iris), size = 0.8*nrow(iris))
random
#train: x's
iris_train <- iris[-random, -5]
iris_test <- iris[-random, -5]
iris_test
#train: x's
iris_train <- iris[random, -5]
#train: x's
iris_train <- iris[random, -5]
iris_test <- iris[-random, -5]
iris_test
iris_categoria_train <- iris[random, 'Species']
iris_categoria_test <- iris[-random, 'Species']
iris_categoria_test
predict <- knn(train = iris_train,
test = iris_test,
cl = iris_categoria_train,
k - 5)
predict <- knn(train = iris_train,
test = iris_test,
cl = iris_categoria_train,
k = 5)
predict <- knn(train = iris_train,
test = iris_test,
cl = iris_categoria_train,
k = 3)
predict
con_mat <- table(predict, iris_categoria_test)
con_mat
predict <- knn(train = iris_train,
test = iris_test,
cl = iris_categoria_train,
k = 5)
predict
con_mat <- table(predict, iris_categoria_test)
con_mat
predict <- knn(train = iris_train,
test = iris_test,
cl = iris_categoria_train,
k = 7)
predict
con_mat <- table(predict, iris_categoria_test)
con_mat
predict <- knn(train = iris_train,
test = iris_test,
cl = iris_categoria_train,
k = 9)
predict
con_mat <- table(predict, iris_categoria_test)
con_mat
set.seed(1)
nrow(iris)
random <- sample(x=1:nrow(iris), size = 0.8*nrow(iris))
random
#train: x's
iris_train <- iris[random, -5]
iris_test <- iris[-random, -5]
iris_test
iris_categoria_train <- iris[random, 'Species']
iris_categoria_test <- iris[-random, 'Species']
iris_categoria_test
predict <- knn(train = iris_train,
test = iris_test,
cl = iris_categoria_train,
k = 9)
predict
con_mat <- table(predict, iris_categoria_test)
con_mat
predict <- knn(train = iris_train,
test = iris_test,
cl = iris_categoria_train,
k = 4)
predict
con_mat <- table(predict, iris_categoria_test)
con_mat
set.seed(2020)
nrow(iris)
random <- sample(x=1:nrow(iris), size = 0.8*nrow(iris))
random
#train: x's
iris_train <- iris[random, -5]
iris_test <- iris[-random, -5]
iris_test
iris_categoria_train <- iris[random, 'Species']
iris_categoria_test <- iris[-random, 'Species']
iris_categoria_test
predict <- knn(train = iris_train,
test = iris_test,
cl = iris_categoria_train,
k = 4)
predict
con_mat <- table(predict, iris_categoria_test)
con_mat
set.seed(9)
nrow(iris)
random <- sample(x=1:nrow(iris), size = 0.8*nrow(iris))
random
#train: x's
iris_train <- iris[random, -5]
iris_test <- iris[-random, -5]
iris_test
iris_categoria_train <- iris[random, 'Species']
iris_categoria_test <- iris[-random, 'Species']
iris_categoria_test
predict <- knn(train = iris_train,
test = iris_test,
cl = iris_categoria_train,
k = 4)
predict
con_mat <- table(predict, iris_categoria_test)
con_mat
?diamonds
diamonds <- as.data.frame(diamonds)
head(diamonds)
nrow(diamonds)
random <- sample(x=1:nrow(iris), size = 0.7*nrow(iris))
random
diamonds <- as.data.frame(diamonds)
head(diamonds)
nrow(diamonds)
random <- sample(x=1:nrow(diamonds), size = 0.7*nrow(diamonds))
random
#train: x's
diamonds_train <- diamonds[random, -5]
diamonds_test <- diamonds[-random, -5]
diamonds_test
#train: x's
diamonds_train <- diamonds[random, -price]
diamonds <- as.data.frame(diamonds)
head(diamonds)
nrow(diamonds)
random <- sample(x=1:nrow(diamonds), size = 0.7*nrow(diamonds))
random
#train: x's
diamonds_train <- diamonds[random, -5]
diamonds_test <- diamonds[-random, -5]
diamonds_test
library(ggplot2)
?diamonds
diamonds <- as.data.frame(diamonds)
d_test
d_categoria_train <- diamonds[random,'cut']
d_categoria_test <- diamonds[-random, 'cut']
predict
con_mat <- table(predict, df_categoria_test)
con_mat <- table(predict, d_categoria_test)
con_mat
sum(diag(con_mat))/length(predict)
cl
library(class)
library(ggplot2)
?diamonds
diamonds <- as.data.frame(diamonds)
random <- sample(x=1:nrwo(diamonds), size = 0.7*nrow(diamonds))
random <- sample(x=1:nrow(diamonds), size = 0.7*nrow(diamonds))
random
d_train <- diamonds[random, c('depth', 'table', 'price')]
d_test <- diamonds[-random, c('depth', 'table', 'price')]
d_categoria_train <- diamonds[random,'cut']
d_categoria_test <- diamonds[-random, 'cut']
predict <- knn(train = d_train,
test = d_categoria_train,
k=5)
predict
con_mat <- table(predict, d_categoria_test)
con_mat
con_mat
str(diamonds)
diamonds <- as.data.frame(diamonds)
random <- sample(x=1:nrow(diamonds), size = 0.7*nrow(diamonds))
random
d_train <- diamonds[random, c('depth', 'table', 'price')]
d_test <- diamonds[-random, c('depth', 'table', 'price')]
d_categoria_train <- diamonds[random,'cut']
d_categoria_test <- diamonds[-random, 'cut']
predict <- knn(train = d_train,
test = d_categoria_train,
k=5)
predict <- knn(train = d_train,
test = d_train,
cl = df_categoria_train,
k=5)
predict <- knn(train = d_train,
test = d_train,
cl = d_categoria_train,
k=5)
predict
con_mat <- table(predict, d_categoria_test)
con_mat
sum(diag(con_mat))/length(predict)
library(class)
library(ggplot2)
?diamonds
str(diamonds)
diamonds <- as.data.frame(diamonds)
random <- sample(x=1:nrow(diamonds), size = 0.7*nrow(diamonds))
random
d_train <- diamonds[random, c('depth', 'table', 'price')]
d_test <- diamonds[-random, c('depth', 'table', 'price')]
d_categoria_train <- diamonds[random,'cut']
d_categoria_test <- diamonds[-random, 'cut']
predict <- knn(train = d_train,
test = d_train,
cl = d_categoria_train,
k=5)
predict
con_mat <- table(predict, d_categoria_test)
con_mat
sum(diag(con_mat))/length(predict)
library(class)
library(ggplot2)
?diamonds
str(diamonds)
diamonds <- as.data.frame(diamonds)
random <- sample(x=1:nrow(diamonds), size = 0.7*nrow(diamonds))
random
d_train <- diamonds[random, c('depth', 'table', 'price')]
d_test <- diamonds[-random, c('depth', 'table', 'price')]
d_categoria_train <- diamonds[random,'cut']
d_categoria_test <- diamonds[-random, 'cut']
predict <- knn(train = d_train,
test = d_train,
cl = d_categoria_train,
k=5)
predict
con_mat <- table(predict, d_categoria_test)
con_mat
sum(diag(con_mat))/length(predict)
library(class)
library(ggplot2)
?diamonds
str(diamonds)
diamonds <- as.data.frame(diamonds)
random <- sample(x=1:nrow(diamonds), size = 0.7*nrow(diamonds))
random
d_train <- diamonds[random, c('depth', 'table', 'price')]
d_test <- diamonds[-random, c('depth', 'table', 'price')]
d_categoria_train <- diamonds[random,'cut']
d_categoria_test <- diamonds[-random, 'cut']
predict <- knn(train = d_train,
test = d_train,
cl = d_categoria_train,
k=5)
predict
con_mat <- table(predict, d_categoria_test)
con_mat
rm(list = ls())
library(class)
library(ggplot2)
?diamonds
str(diamonds)
diamonds <- as.data.frame(diamonds)
random <- sample(x=1:nrow(diamonds), size = 0.7*nrow(diamonds))
random
d_train <- diamonds[random, c('depth', 'table', 'price')]
d_test <- diamonds[-random, c('depth', 'table', 'price')]
d_categoria_train <- diamonds[random,'cut']
d_categoria_test <- diamonds[-random, 'cut']
predict <- knn(train = d_train,
test = d_train,
cl = d_categoria_train,
k=5)
predict
con_mat <- table(predict, d_categoria_test)
con_mat
d_train <- diamonds[random, c('depth', 'table', 'x', 'y', 'z', 'carat')]
library(class)
library(ggplot2)
?diamonds
str(diamonds)
diamonds <- as.data.frame(diamonds)
random <- sample(x=1:nrow(diamonds), size = 0.7*nrow(diamonds))
random
d_train <- diamonds[random, c('depth', 'table', 'x', 'y', 'z', 'carat')]
d_test <- diamonds[-random, c('depth', 'table', 'x', 'y', 'z', 'carat')]
d_categoria_train <- diamonds[random,'cut']
d_categoria_test <- diamonds[-random, 'cut']
predict <- knn(train = d_train,
test = d_train,
cl = d_categoria_train,
k=5)
predict
con_mat <- table(predict, d_categoria_test)
con_mat
con_mat
predict <- knn(train = d_train,
test = d_test,
cl = d_categoria_train,
k=5)
predict
con_mat <- table(predict, d_categoria_test)
con_mat
sum(diag(con_mat))/lenght(predict)
sum(diag(con_mat))/length(predict)
install.packages("RMySQL")
install.packages("DBI")
library(RMySQL)
library(DBI)
head(MyDataBase)
library(RMySQL)
library(DBI)
MyDataBase <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
dbListFields(MyDataBase, "select * from country")
head(MyDataBase)
head(DataDB)
MyDataBase <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
dbListFields(MyDataBase, dbListTables(MyDataBase)[3])
DataDB <- dbGetQuery(MyDataBase, "select * from Country")
head(DataDB)
dbListTables(MyDataBase)[2]
dbListTables(MyDataBase)[3]
dbListTables(MyDataBase)[4]
dbListTables(MyDataBase)[1]
dbListFields(MyDataBase, dbListTables(MyDataBase)[4])
dbListTables(MyDataBase)[2]
dbListFields(MyDataBase, dbListTables(MyDataBase)[3])
DataDB <- dbGetQuery(MyDataBase, "select * from Country")
head(DataDB)
dgGetQuery(MyDataBase, "select Continent, sum(Population) from Country
group by Continent
order by sum(Population) desc;")
reto <- dgGetQuery(MyDataBase, "select Continent, sum(Population) from Country
group by Continent
order by sum(Population) desc;")
reto <- dgGetQuery(MyDataBase, "select Continent, sum(Population) from Country
group by Continent
order by sum(Population) desc;")
retoUno <- dgGetQuery(MyDataBase, "select Continent, sum(Population) from Country
group by Continent
order by sum(Population) desc;")
retoUno
reto <- dgGetQuery(MyDataBase, "select Continent, sum(Population) from Country
group by Continent
order by sum(Population) desc;")
shiny::runApp('proyecto')
shiny::runApp()
